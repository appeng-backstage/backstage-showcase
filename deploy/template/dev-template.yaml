---
kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: backstage
parameters:
- name: NAME
  value: janus-idp
  displayName: Name
  description: 'Custom name for backstage/janus deployment, route ,  etc'
- name: IMAGE
  value: quay.io/janus-idp/redhat-backstage-build
- name: IMAGE_TAG
  value: latest
- name: HOSTNAME
  value: ''
  displayName: Custom https Route/Janus Hostname
  description: 'Custom hostname for backstage/janus front-end/back-end calls for example :  apps.<>.devcluster.openshift.com'
  required: false
- name: DEV_NAMESPACE
  value: appeng-janus
- name : GITHUB_CLIENT_ID
  value: 'update'
- name: GITHUB_CLIENT_SECRET
  value: 'update'
- name: GITHUB_ACCESS_TOKEN
  value: 'update'
- name: CONFIG_CONTENT
  value: 'default-secret'
- name: KEYCLOAK_REALM_NAME
  value: 'default-secret'
- name: KEYCLOAK_CLIENT_ID
  value: 'default-secret'
- name: KEYCLOAK_CLIENT_SECRET
  value: 'default-secret'
- name: KEYCLOAK_BASE_URL
  value: 'default-secret'

objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${NAME}
    namespace: ${DEV_NAMESPACE}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}
    namespace: ${DEV_NAMESPACE}
  labels:
    app.kubernetes.io/name: ${NAME}
    backstage.io/kubernetes-id: ${NAME}
  spec:
    type: ClusterIP
    ports:
      - name: http-backend
        port: 7007
        targetPort: backend
        protocol: TCP
    selector:
      app.kubernetes.io/name: ${NAME}
      backstage.io/kubernetes-id: ${NAME}
- kind: Service
  apiVersion: v1
  spec:
    ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
    selector:
      deployment: postgresql
  metadata:
    name: postgresql
    namespace: ${DEV_NAMESPACE}
    labels:
      app: postgresql
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: postgresql
    namespace: ${DEV_NAMESPACE}
    labels:
      app: postgresql
      deployment: postgresql
  spec:
    replicas: 1
    selector:
      matchLabels:
        deployment: postgresql
    template:
      metadata:
        labels:
          app: postgresql
          deployment: postgresql
      spec:
        containers:
        - name: postgresql
          image: registry.redhat.io/rhel9/postgresql-15:latest
          ports:
          - containerPort: 5432
            protocol: TCP
          env:
            - name: BITNAMI_DEBUG
              value: 'false'
            - name: POSTGRESQL_PORT_NUMBER
              value: '5432'
            - name: POSTGRESQL_VOLUME_DIR
              value: /var/lib/pgsql/data
            - name: PGDATA
              value: /var/lib/pgsql/data/userdata
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: backstage-postgresql
                  key: postgres-password
            - name: POSTGRES_DB
              value: backstage_plugin_catalog
            - name: POSTGRESQL_ENABLE_LDAP
              value: 'no'
            - name: POSTGRESQL_ENABLE_TLS
              value: 'no'
            - name: POSTGRESQL_LOG_HOSTNAME
              value: 'false'
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: 'false'
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: 'false'
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: 'off'
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: backstage-postgresql
                  key: postgres-password
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
        restartPolicy: Always
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 25%
        maxSurge: 25%
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${NAME}
    namespace: ${DEV_NAMESPACE}
    labels:
      app.kubernetes.io/name: ${NAME}
      backstage.io/kubernetes-id: ${NAME}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: ${NAME}
        backstage.io/kubernetes-id: ${NAME}
    template:
      metadata:
        labels:
          app.kubernetes.io/name: ${NAME}
          backstage.io/kubernetes-id: ${NAME}
      spec:
        serviceAccountName: ${NAME}
        volumes:
          - name: backstage-app-config
            configMap:
              name: backstage-app-config
              defaultMode: 420
        containers:
        - name: ${NAME}
          image: ${IMAGE}:${IMAGE_TAG}
          imagePullPolicy: "Always"
          volumeMounts:
            - name: backstage-app-config
              mountPath: /app/app-config-from-configmap.yaml
              subPath: app-config.yaml
          command:
          - node
          - packages/backend
          args:
            - '--config'
            - /app/app-config-from-configmap.yaml
          env:
          - name: APP_CONFIG_backend_listen_port
            value: '7007'
          - name: POSTGRES_HOST
            value: postgresql
          - name: POSTGRES_PORT
            value: '5432'
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: backstage-postgresql
                key: password
          - name: POSTGRESQL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: backstage-postgresql
                key: postgres-password
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                name: backstage-github
                key: token
                optional: true
          - name: AUTH_GITHUB_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: backstage-github
                key: client-id
                optional: true
          - name: AUTH_GITHUB_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: backstage-github
                key: client-secret
                optional: true
          - name: KEYCLOAK_REALM
            valueFrom:
              secretKeyRef:
                name: backstage-keycloak
                key: realm
                optional: true
          - name: KEYCLOAK_CLIENTID
            valueFrom:
              secretKeyRef:
                name: backstage-keycloak
                key: clientId
                optional: true
          - name: KEYCLOAK_CLIENTSECRET
            valueFrom:
              secretKeyRef:
                name: backstage-keycloak
                key: clientSecret
                optional: true
          - name: KEYCLOAK_BASE_URL
            value: ${KEYCLOAK_BASE_URL}
          ports:
          - name: backend
            containerPort: 7007
            protocol: TCP
- kind: Secret
  apiVersion: v1
  metadata:
    name: backstage-postgresql
    namespace: ${DEV_NAMESPACE}
    labels:
      app.kubernetes.io/name: postgresql
      backstage.io/kubernetes-id: ${NAME}
  data:
    password: eTVkTkprRUNOTw==
    postgres-password: YzlKVndNQ3lJTg==
  type: Opaque

- kind: Secret
  apiVersion: v1
  metadata:
    name: backstage-github
    namespace: ${DEV_NAMESPACE}
  stringData:
    client-id: ${GITHUB_CLIENT_ID}
    client-secret: ${GITHUB_CLIENT_SECRET}
    client-token: ${GITHUB_ACCESS_TOKEN}
  type: Opaque

- kind: Secret
  apiVersion: v1
  metadata:
    name: backstage-keyclaok
    namespace: ${DEV_NAMESPACE}
  stringData:
    realm: ${KEYCLOAK_REALM_NAME}
    clientId: ${KEYCLOAK_CLIENT_ID}
    clientSecret: ${KEYCLOAK_CLIENT_SECRET}
  type: Opaque

- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: ${NAME}
    namespace: ${DEV_NAMESPACE}
    annotations:
      openshift.io/host.generated: 'true'
  spec:
    to:
      kind: Service
      name: ${NAME}
      weight: 100
    port:
      targetPort: http-backend
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Allow
    wildcardPolicy: None

- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: backstage-app-config
    namespace: ${DEV_NAMESPACE}
  data:
    app-config.yaml: ${CONFIG_CONTENT}

- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: goodbye

  spec:
    params:
      - name: username
        type: string
    steps:
      - name: goodbye
        image: ubuntu
        script: |
          #!/bin/bash
          echo "Goodbye $(params.username)!"

- apiVersion: tekton.dev/v1beta1
  kind: Pipeline
  metadata:
    name: hello-goodbye
    labels:
      app.kubernetes.io/name: goodbye
      backstage.io/kubernetes-id: ${NAME}
  spec:
    params:
      - name: username
        type: string
    tasks:
      - name: hello
        taskRef:
          name: hello
      - name: goodbye
        runAfter:
          - hello
        taskRef:
          name: goodbye
        params:
          - name: username
            value: $(params.username)

- apiVersion: tekton.dev/v1beta1
  kind: PipelineRun
  metadata:
    name: hello-goodbye-run
    labels:
      app.kubernetes.io/name: goodbye
      backstage.io/kubernetes-id: ${NAME}
  spec:
    pipelineRef:
      name: hello-goodbye
    params:
      - name: username
        value: "Tekton"
